import ij.ImagePlus;
import ij.process.ImageProcessor;
import ij.plugin.filter.PlugInFilter;
import java.awt.Color;
import ij.*;

public class hsv_match_histogram implements PlugInFilter {
    public int setup(String args, ImagePlus im) {
        return DOES_RGB;
    }
    public void run(ImageProcessor ip) {
        int M = ip.getWidth();
        int N = ip.getHeight();
        Color color;
        float[] hsv  = new float[3];
        float[] h = new float[360];
        float[] s = new float[101];
        float[] v = new float[101];

        int red, green, blue;

        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) { 
                color = new Color(ip.getPixel(j,i));
                red = color.getRed();
                green = color.getGreen();
                blue = color.getBlue();
                Color.RGBtoHSB (red, green, blue, hsv);
                h[(int) (hsv[0]*360)] += 1;
                s[(int) (hsv[1]*100)] += 1;
                v[(int) (hsv[2]*100)] += 1;
            }
        }

        for (int j = 1; j < h.length; j++) {
            h[j] = h[j - 1] + h[j];
        } 
        for (int j = 1; j < s.length; j++) {
            s[j] = s[j - 1] + s[j];
            v[j] = v[j - 1] + v[j];
        }
        for (int j = 0; j < h.length; j++) {
            h[j] = h[j] / (M * N);
        }
        for (int j = 0; j < s.length; j++) {
            s[j] = s[j] / (M * N);
            v[j] = v[j] / (M * N);
        }
        double[] benchmark_histogram_h = {0.01189,0.01287,0.01451,0.01693,0.01901,0.02114,0.0239,0.02868,0.03247,0.03513,0.04782,0.06002,0.0636,0.07955,0.08269,0.10562,0.13509,0.14471,0.17719,0.21223,0.23312,0.29886,0.33878,0.39804,0.42311,0.47297,0.5335,0.55112,0.5706,0.5767,0.58978,0.59533,0.60389,0.60597,0.60939,0.61121,0.61138,0.62515,0.62609,0.63622,0.63628,0.64401,0.65041,0.66315,0.66395,0.66596,0.66597,0.66731,0.67501,0.67952,0.67952,0.68019,0.68075,0.68076,0.68077,0.68077,0.68079,0.68079,0.68079,0.68079,0.69153,0.69153,0.69153,0.69153,0.6916,0.69161,0.69161,0.69214,0.69215,0.69216,0.69377,0.69377,0.6989,0.6989,0.6989,0.6989,0.69891,0.69891,0.69891,0.69901,0.69901,0.69901,0.69901,0.69901,0.70005,0.70037,0.70037,0.70037,0.70037,0.70037,0.70037,0.70037,0.70037,0.70037,0.70037,0.70037,0.70037,0.70037,0.70037,0.70037,0.70543,0.70543,0.70547,0.70547,0.70547,0.70547,0.70547,0.70547,0.70547,0.70547,0.70592,0.70592,0.70595,0.70595,0.70595,0.70595,0.70595,0.70595,0.70595,0.70595,0.70606,0.70606,0.70606,0.70606,0.70606,0.70606,0.70607,0.70607,0.70607,0.70607,0.70607,0.70607,0.70728,0.70728,0.70728,0.70728,0.70728,0.70728,0.70728,0.70761,0.70761,0.70761,0.70761,0.70761,0.70761,0.70761,0.70766,0.70767,0.70767,0.70767,0.71637,0.71637,0.71637,0.71637,0.71637,0.71637,0.71637,0.71637,0.71654,0.71654,0.72049,0.72049,0.72049,0.72049,0.72049,0.72801,0.72801,0.72801,0.72806,0.72806,0.72815,0.72815,0.72815,0.73175,0.73234,0.73234,0.73238,0.73238,0.73238,0.73238,0.74451,0.74451,0.74451,0.74465,0.74465,0.75098,0.75098,0.75098,0.75098,0.76799,0.76818,0.80345,0.80345,0.80345,0.80345,0.80353,0.87087,0.87089,0.87105,0.87114,0.87114,0.87262,0.90584,0.9059,0.906,0.91306,0.95783,0.96279,0.963,0.963,0.96334,0.96334,0.96605,0.96605,0.96616,0.96638,0.96638,0.97191,0.97191,0.97193,0.97544,0.9763,0.9763,0.97634,0.97649,0.97662,0.97662,0.97662,0.97834,0.97834,0.97899,0.97902,0.97902,0.97902,0.97902,0.97902,0.97902,0.97902,0.97902,0.97902,0.98203,0.98203,0.98203,0.98203,0.98203,0.98203,0.98203,0.98207,0.98207,0.98221,0.98221,0.98221,0.98298,0.98298,0.98298,0.98298,0.98298,0.98298,0.98298,0.98298,0.98298,0.98298,0.98298,0.98298,0.98325,0.98333,0.98333,0.98333,0.98333,0.98333,0.98333,0.98333,0.98333,0.98333,0.98333,0.98333,0.98333,0.98333,0.98333,0.98471,0.98471,0.98471,0.98474,0.98474,0.98474,0.98474,0.98474,0.98474,0.98474,0.98474,0.98483,0.98483,0.98484,0.98484,0.98484,0.98484,0.98484,0.98484,0.98484,0.98484,0.98488,0.98488,0.98488,0.98488,0.98488,0.98488,0.98489,0.98489,0.98489,0.98489,0.9849,0.9849,0.98533,0.98534,0.98534,0.98534,0.98536,0.98536,0.98536,0.98536,0.98558,0.98558,0.9856,0.9856,0.9856,0.9856,0.98571,0.98578,0.98578,0.98578,0.98903,0.98903,0.98904,0.98906,0.98906,0.98907,0.98907,0.98907,0.98918,0.98918,0.99009,0.99009,0.9901,0.99012,0.99022,0.99183,0.99184,0.99185,0.99203,0.99207,0.99235,0.9925,0.99277,0.99381,0.995,0.99563,0.99738,0.99841,0.99959,1};
        double[] benchmark_histogram_s = {0.00759,0.01816,0.03219,0.05668,0.12631,0.19415,0.28908,0.30014,0.30432,0.30785,0.31187,0.3152,0.31932,0.32438,0.33087,0.34012,0.3485,0.35423,0.35956,0.3636,0.37088,0.37606,0.3811,0.38516,0.38817,0.39447,0.39899,0.40346,0.40848,0.41371,0.4208,0.42946,0.43927,0.45244,0.46632,0.48135,0.50047,0.52204,0.54303,0.56482,0.59378,0.61921,0.6453,0.66862,0.69487,0.71984,0.74341,0.76456,0.78447,0.79955,0.82682,0.84688,0.86781,0.88624,0.90376,0.9211,0.93801,0.95147,0.96263,0.97116,0.97907,0.9841,0.98821,0.99088,0.99283,0.99432,0.99519,0.99576,0.99637,0.99683,0.9974,0.9977,0.998,0.99827,0.99846,0.99878,0.99896,0.99918,0.99939,0.99947,0.99959,0.99972,0.99981,0.99989,0.9999,0.99991,0.99991,0.99995,0.99995,0.99995,0.99995,0.99995,0.99996,0.99996,0.99996,0.99996,0.99996,0.99996,0.99996,0.99996,1};
        double[] benchmark_histogram_v = {0,0.00064,0.00218,0.00541,0.00969,0.01509,0.01874,0.02567,0.03054,0.04025,0.05236,0.06119,0.07309,0.08038,0.09143,0.09853,0.10948,0.11529,0.12452,0.1305,0.13911,0.14731,0.15218,0.16002,0.16507,0.17219,0.17736,0.18715,0.19455,0.20751,0.21936,0.22865,0.245,0.25514,0.27046,0.2811,0.2966,0.30762,0.32432,0.33658,0.35722,0.38082,0.39548,0.41689,0.4321,0.45554,0.47187,0.49645,0.51287,0.5377,0.56295,0.57872,0.60177,0.61913,0.64832,0.66931,0.70042,0.7169,0.74212,0.7547,0.76467,0.77035,0.77376,0.78009,0.78643,0.80199,0.81616,0.84059,0.86583,0.92512,0.97572,0.99442,0.99973,0.99998,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};

        int h_index;
        int s_index;
        int v_index;
        double h_value;
        double s_value;
        double v_value;
        double adj_h_value;
        float[] new_intensities = new float[3];

        for (int i = 0; i < N; i++) {
                for (int j = 0; j < M; j++) {
                    double diff_h = 2;
                    double diff_s = 2;
                    double diff_v = 2;
                    color = new Color(ip.getPixel(j,i));
                    red = color.getRed();
                    green = color.getGreen();
                    blue = color.getBlue();
                    
                    Color.RGBtoHSB (red, green, blue, hsv);
                    h_value = h[(int) (hsv[0]*360)];
                    s_value = s[(int) (hsv[1]*100)];
                    v_value = v[(int) (hsv[2]*100)];

                    for (int k = 0; k < 360; k++) {
                        if (Math.abs(benchmark_histogram_h[k] - h_value) < diff_h) {
                            diff_h = Math.abs(benchmark_histogram_h[k] - h_value);
                            new_intensities[0] = (float) k / 360;
                        }
                    }
                    for (int l = 0; l < 101; l++) {
                        if (Math.abs(benchmark_histogram_s[l] - s_value) < diff_s) {
                            diff_s = Math.abs(benchmark_histogram_s[l] - s_value);
                            new_intensities[1] = (float) l / 101;
                        }
                        if (Math.abs(benchmark_histogram_v[l] - v_value) < diff_v) {
                            diff_v = Math.abs(benchmark_histogram_v[l] - v_value);
                            new_intensities[2] = (float) l / 101;
                        }
                    }
                    ip.putPixel(j, i, Color.HSBtoRGB(new_intensities[0], new_intensities[1], new_intensities[2]));
                }
        } 
    }
    
}